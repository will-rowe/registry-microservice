//Package cmd is generated by cobra and is used to call the command line interface for the registry.
package cmd

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/golang/protobuf/ptypes"
	"github.com/spf13/cobra"
	"google.golang.org/grpc"

	api "github.com/will-rowe/registry-microservice/pkg/api/v1"
)

// command line arguments
var (
	serverAddress *string // address of the server hosting the registry service
	serverRequest *string // CRUD operation to perform
)

// clientCmd represents the client command
var clientCmd = &cobra.Command{
	Use:   "client",
	Short: "A client to send requests to the registry server",
	Long: `Send requests to the registry server using gRPC.

	The client connects to the server and makes a CRUD request
	for participants held in the registry.`,
	Run: func(cmd *cobra.Command, args []string) {
		runClient()
	},
}

// init the command line arguments and add the subcommand to the root
func init() {
	serverAddress = clientCmd.Flags().StringP("serverAddress", "s", fmt.Sprintf("%s:%s", DefaultServerAddress, DefaultgRPCport), "address of the server hosting the registry service")
	serverRequest = clientCmd.Flags().StringP("request", "r", "", "server request (create|retrieve|update|delete)")
	clientCmd.MarkFlagRequired("request")
	rootCmd.AddCommand(clientCmd)
}

// runClient connects to the client and performs CRUD operation.
func runClient() {

	// check a request is provided and is supported
	switch *serverRequest {
	case "create":
	case "retrieve":
	case "update":
	case "delete":
	default:
		log.Fatal("only create|retrieve|update|delete requests are supported")
	}

	// connect to the gRPC server
	conn, err := grpc.Dial(*serverAddress, grpc.WithInsecure())
	if err != nil {
		log.Fatalf("could not connect to gRPC server: %v", err)
	}
	defer conn.Close()

	// establish the client
	client := api.NewRegistryServiceClient(conn)

	// setup context
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// dummy create request
	t := time.Now().In(time.UTC)
	dob, _ := ptypes.TimestampProto(t)
	req1 := api.CreateRequest{
		ApiVersion: DefaultAPIVersion,
		Participant: &api.Participant{
			Id:      "KFG-734",
			Dob:     dob,
			Phone:   "123456789",
			Address: "the moon",
		},
	}
	res1, err := client.Create(ctx, &req1)
	if err != nil {
		log.Fatalf("Create request failed: %v", err)
	}
	log.Printf("Create response: <%+v>\n", res1)
}

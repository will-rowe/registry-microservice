// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/will-rowe/registry-microservice/internal/api/v1 (interfaces: RegistryServiceClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/will-rowe/registry-microservice/internal/api/v1"
	grpc "google.golang.org/grpc"
)

// MockRegistryServiceClient is a mock of RegistryServiceClient interface.
type MockRegistryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryServiceClientMockRecorder
}

// MockRegistryServiceClientMockRecorder is the mock recorder for MockRegistryServiceClient.
type MockRegistryServiceClientMockRecorder struct {
	mock *MockRegistryServiceClient
}

// NewMockRegistryServiceClient creates a new mock instance.
func NewMockRegistryServiceClient(ctrl *gomock.Controller) *MockRegistryServiceClient {
	mock := &MockRegistryServiceClient{ctrl: ctrl}
	mock.recorder = &MockRegistryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryServiceClient) EXPECT() *MockRegistryServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegistryServiceClient) Create(arg0 context.Context, arg1 *v1.CreateRequest, arg2 ...grpc.CallOption) (*v1.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistryServiceClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistryServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockRegistryServiceClient) Delete(arg0 context.Context, arg1 *v1.DeleteRequest, arg2 ...grpc.CallOption) (*v1.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistryServiceClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistryServiceClient)(nil).Delete), varargs...)
}

// Retrieve mocks base method.
func (m *MockRegistryServiceClient) Retrieve(arg0 context.Context, arg1 *v1.RetrieveRequest, arg2 ...grpc.CallOption) (*v1.RetrieveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(*v1.RetrieveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockRegistryServiceClientMockRecorder) Retrieve(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockRegistryServiceClient)(nil).Retrieve), varargs...)
}

// Update mocks base method.
func (m *MockRegistryServiceClient) Update(arg0 context.Context, arg1 *v1.UpdateRequest, arg2 ...grpc.CallOption) (*v1.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRegistryServiceClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRegistryServiceClient)(nil).Update), varargs...)
}
